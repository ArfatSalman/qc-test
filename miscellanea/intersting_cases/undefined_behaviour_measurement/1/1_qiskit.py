from qiskit import QuantumRegister, ClassicalRegister
from qiskit import QuantumCircuit, execute, Aer
import numpy as np

shots = 8192

qc = QuantumCircuit()

q = QuantumRegister(11, 'q')
c = ClassicalRegister(11, 'c')

qc.add_register(q)
qc.add_register(c)

qc.z(q[0])
qc.h(q[9])
qc.h(q[0])
qc.cx(q[9], q[10])
qc.cx(q[0], q[3])
qc.cx(q[0], q[6])
qc.cz(q[0], q[3])
qc.cz(q[0], q[6])
qc.h(q[0])
qc.h(q[3])
qc.h(q[6])
qc.z(q[0])
qc.z(q[3])
qc.z(q[6])
qc.cx(q[0], q[1])
qc.cx(q[3], q[4])
qc.cx(q[6], q[7])
qc.cx(q[0], q[2])
qc.cx(q[3], q[5])
qc.cx(q[6], q[8])
qc.cz(q[0], q[1])
qc.cz(q[3], q[4])
qc.cz(q[6], q[7])
qc.cz(q[0], q[2])
qc.cz(q[3], q[5])
qc.cz(q[6], q[8])
qc.cx(q[0], q[9])
qc.measure(q[9], c[9])
qc.h(q[0])
qc.cx(q[9], q[10])
qc.measure(q[0], c[0])
qc.cz(q[0], q[10])
qc.cx(q[10], q[1])
qc.cx(q[10], q[2])
qc.cx(q[3], q[4])
qc.cx(q[6], q[7])
qc.cx(q[3], q[5])
qc.cx(q[6], q[8])
qc.cz(q[10], q[1])
qc.cz(q[10], q[2])
qc.cz(q[3], q[4])
qc.cz(q[6], q[7])
qc.cz(q[3], q[5])
qc.cz(q[6], q[8])
qc.ccx(q[1], q[2], q[10])
qc.ccx(q[5], q[4], q[3])
qc.ccx(q[8], q[7], q[6])
qc.h(q[10])
qc.ccx(q[1], q[2], q[10])
qc.h(q[3])
qc.h(q[6])
qc.h(q[10])
qc.ccx(q[5], q[4], q[3])
qc.ccx(q[8], q[7], q[6])
qc.h(q[10])
qc.h(q[3])
qc.h(q[6])
qc.z(q[10])
qc.h(q[3])
qc.h(q[6])
qc.z(q[3])
qc.z(q[6])
qc.cx(q[10], q[3])
qc.cx(q[10], q[6])
qc.cz(q[10], q[3])
qc.cz(q[10], q[6])
qc.ccx(q[3], q[6], q[10])
qc.h(q[10])
qc.ccx(q[3], q[6], q[10])
qc.h(q[10])
qc.h(q[10])
qc.z(q[10])
qc.measure(q[10], c[10])

backend = Aer.get_backend('qasm_simulator')
job = execute(qc, backend=backend, shots=shots)
job_result = job.result()
print(job_result.get_counts(qc))
